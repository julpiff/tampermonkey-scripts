// ==UserScript==
// @name         Ingrid Debug Button
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  Adds and manages a debug button and session ID display for Ingrid sessions.
// @author       You
// @exclude      https://debug.ingrid.com/*
// @match        *://*/*
// @grant        none
// @updateURL    https://raw.githubusercontent.com/julpiff/tampermonkey-scripts/refs/heads/main/Ingrid%20Debug%20Button
// @downloadURL  https://raw.githubusercontent.com/julpiff/tampermonkey-scripts/refs/heads/main/Ingrid%20Debug%20Button
// ==/UserScript==

(function() {
    'use strict';

    // Global variables for session management. Once we’ve got a session ID, we don’t update it further.
    let currentSessionId = null;
    let iframeObserver = null;
    let observer = null;

    // Constants for our DOM elements. No messing about.
    const SESSION_ID_DISPLAY_ID = 'ingrid-session-id';
    const DEBUG_BUTTON_ID = 'ingrid-debug-button';
    const WIDGET_IFRAME_ID = 'ingrid-widget-iframe';

    // Update the session ID display and debug button—only once, so we don’t keep updating like a twat.
    function updateSessionId(sessionId) {
        if (currentSessionId) return; // Already got one, so bugger off with any new ones.
        if (sessionId) {
            currentSessionId = sessionId;
            createOrUpdateSessionIdDisplay(sessionId);
            createOrUpdateDebugButton(sessionId);
        }
    }

    // Create or update the session ID display. It’s bloody simple.
    function createOrUpdateSessionIdDisplay(sessionId) {
        let sessionIdDisplay = document.getElementById(SESSION_ID_DISPLAY_ID);
        if (!sessionIdDisplay) {
            sessionIdDisplay = document.createElement('div');
            sessionIdDisplay.id = SESSION_ID_DISPLAY_ID;
            sessionIdDisplay.style.position = 'fixed';
            sessionIdDisplay.style.bottom = '10px';
            sessionIdDisplay.style.right = '10px';
            sessionIdDisplay.style.padding = '5px 10px';
            sessionIdDisplay.style.backgroundColor = '#ffffff';
            sessionIdDisplay.style.color = '#000000';
            sessionIdDisplay.style.border = '1px solid #000000';
            sessionIdDisplay.style.borderRadius = '5px';
            sessionIdDisplay.style.fontFamily = 'Arial, sans-serif';
            sessionIdDisplay.style.fontSize = '12px';
            sessionIdDisplay.style.zIndex = '10000';
            sessionIdDisplay.style.cursor = 'text';
            sessionIdDisplay.style.userSelect = 'text';
            sessionIdDisplay.style.webkitUserSelect = 'text';
            document.body.appendChild(sessionIdDisplay);
        }
        sessionIdDisplay.textContent = sessionId;
    }

    // Create or update the debug button so you can open the damn debug page.
    function createOrUpdateDebugButton(sessionId) {
        let debugButton = document.getElementById(DEBUG_BUTTON_ID);
        if (!debugButton) {
            debugButton = document.createElement('button');
            debugButton.id = DEBUG_BUTTON_ID;
            debugButton.textContent = 'Debug';
            debugButton.style.position = 'fixed';
            debugButton.style.bottom = '45px';
            debugButton.style.right = '10px';
            debugButton.style.padding = '10px 15px';
            debugButton.style.backgroundColor = '#001F3F';
            debugButton.style.color = '#ffffff';
            debugButton.style.border = 'none';
            debugButton.style.borderRadius = '5px';
            debugButton.style.cursor = 'pointer';
            debugButton.style.fontFamily = 'Arial, sans-serif';
            debugButton.style.zIndex = '10000';
            document.body.appendChild(debugButton);
        }
        // Wipe out any old event listeners like a proper muppet.
        const newDebugButton = debugButton.cloneNode(true);
        debugButton.parentNode.replaceChild(newDebugButton, debugButton);
        newDebugButton.addEventListener('click', () => {
            window.open(`https://debug.ingrid.com/session-history?id=${sessionId}`, '_blank');
        });
    }

    // Extract the first Ingrid code from GraphQL responses and yank out the session ID.
    function extractFirstIngridCodeAndDisplay(data) {
        let firstCode = null;
        (function search(obj) {
            if (firstCode) return; // Found it, so bugger off.
            if (obj && typeof obj === 'object') {
                if (Array.isArray(obj.availableDeliveryStrategies)) {
                    for (const strategy of obj.availableDeliveryStrategies) {
                        if (strategy && strategy.code && strategy.code.startsWith("ingrid")) {
                            firstCode = strategy.code;
                            break;
                        }
                    }
                }
                if (!firstCode) {
                    for (const key in obj) {
                        if (Object.prototype.hasOwnProperty.call(obj, key)) {
                            search(obj[key]);
                            if (firstCode) return;
                        }
                    }
                }
            }
        })(data);

        if (firstCode) {
            // Yank the session ID from the first bloody set of brackets.
            const match = firstCode.match(/^ingrid\[(.*?)\]/);
            const sessionId = match && match[1] ? match[1] : firstCode;
            updateSessionId(sessionId);
        }
    }

    // Intercept fetch calls for those damn GraphQL requests.
    const origFetch = window.fetch;
    window.fetch = function(input, init) {
        const url = (typeof input === 'string') ? input : input.url;
        if (url && url.includes("graphql?operationName=Proposal")) {
            return origFetch(input, init).then(resp => {
                const clone = resp.clone();
                clone.json().then(data => {
                    extractFirstIngridCodeAndDisplay(data);
                }).catch(err => {
                    // Well, fuck it if JSON parsing fails.
                });
                return resp;
            });
        }
        return origFetch(input, init);
    };

    // Intercept XMLHttpRequest calls too—no half-arsed shite allowed.
    const origXHROpen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {
        this._url = url;
        return origXHROpen.apply(this, arguments);
    };

    const origXHRSend = XMLHttpRequest.prototype.send;
    XMLHttpRequest.prototype.send = function(data) {
        if (this._url && this._url.includes("graphql?operationName=Proposal")) {
            this.addEventListener("load", () => {
                try {
                    const responseData = JSON.parse(this.responseText);
                    extractFirstIngridCodeAndDisplay(responseData);
                } catch (e) {
                    // Fuck it if JSON parsing fails—move on.
                }
            });
        }
        return origXHRSend.apply(this, arguments);
    };

    // Now for the widget iframe bullshit. This little git extracts the session ID from its src.
    function extractSessionIdFromIframeSrc(src) {
        const needle = 'sessionId%22%3A%22'; // Decodes to 'sessionId":"'
        const index = src.indexOf(needle);
        if (index === -1) return null;
        const start = index + needle.length;
        const lengthUUID = 36;
        return src.substring(start, start + lengthUUID);
    }

    // Handle the iframe like a proper sod. Update session ID when its src changes.
    function handleIframe(iframe) {
        if (!iframe) return;
        const src = iframe.src;
        const sessionId = extractSessionIdFromIframeSrc(src);
        if (sessionId) {
            updateSessionId(sessionId);
        }
        if (iframeObserver) {
            iframeObserver.disconnect();
        }
        iframeObserver = new MutationObserver((mutationList) => {
            mutationList.forEach(m => {
                if (m.type === 'attributes' && m.attributeName === 'src') {
                    const newSrc = iframe.src;
                    const newSessionId = extractSessionIdFromIframeSrc(newSrc);
                    if (newSessionId) {
                        updateSessionId(newSessionId);
                    }
                }
            });
        });
        iframeObserver.observe(iframe, { attributes: true });
    }

    // When new nodes are added, check if it's that pesky widget iframe.
    function handleNodeAddition(node) {
        if (node.id === WIDGET_IFRAME_ID && node.tagName === 'IFRAME') {
            handleIframe(node);
        }
    }

    // Instead of wiping out our debug button when the iframe disappears, we simply disconnect its observer.
    function handleNodeRemoval(node) {
        if (node.id === WIDGET_IFRAME_ID && node.tagName === 'IFRAME') {
            if (iframeObserver) {
                iframeObserver.disconnect();
                iframeObserver = null;
            }
        }
    }

    // On attribute changes, if we lose the iframe, we don’t remove our damn debug button.
    function handleAttributeChange(mutation) {
        const iframe = document.getElementById(WIDGET_IFRAME_ID);
        if (iframe) {
            handleIframe(iframe);
        }
    }

    // The main mutation callback – keeps an eye on the document like a nosy git.
    function mutationCallback(mutationsList) {
        mutationsList.forEach(mutation => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach(handleNodeAddition);
                mutation.removedNodes.forEach(handleNodeRemoval);
            }
            if (mutation.type === 'attributes') {
                handleAttributeChange(mutation);
            }
        });
    }

    // Give it a once-over to see if the dodgy iframe is already there.
    function initialCheck() {
        const iframe = document.getElementById(WIDGET_IFRAME_ID);
        if (iframe) {
            handleIframe(iframe);
        }
    }

    // On page load, set up our mutation observer.
    window.addEventListener('load', function() {
        if (!observer) {
            observer = new MutationObserver(mutationCallback);
            observer.observe(document.body, { childList: true, subtree: true, attributes: true });
        }
        initialCheck();
        // Note: We don't unconditionally create the debug button here.
    });

})();
